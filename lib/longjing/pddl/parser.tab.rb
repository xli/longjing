#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require 'strscan'
  require 'longjing/pddl/type'
  require 'longjing/pddl/var'
  require 'longjing/pddl/obj'
  require 'longjing/pddl/predicate'
  require 'longjing/pddl/literal'
  require 'longjing/pddl/action'
module Longjing
  module PDDL
    class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 201)
  SUPPORTED_REQUIREMENTS = [:strips, :typing,
                            :'negative-preconditions',
                            :equality]

  def domain(name)
    @predicates, @types = {}, {}
    @domains[name] = { domain: name, predicates: [], types: [] }
  end

  def problem(name, domain_name)
    domain = @domains[domain_name]
    raise UnknownDomain unless domain
    @predicates = Hash[domain[:predicates].map{|pred| [pred.name, pred]}]
    @types = Hash[domain[:types].map{|t| [t.name, t]}]
    @objects = {}
    { problem: name, objects: [], init: [] }.merge(domain)
  end

  def requirements(reqs)
    unsupported = reqs - SUPPORTED_REQUIREMENTS
    raise UnsupportedRequirements, unsupported unless unsupported.empty?
    reqs
  end

  def predicate(name, vars=nil)
    raise "Duplicated predicate name #{name}" if @predicates.has_key?(name)
    @predicates[name] = Predicate.new(name, vars)
  end

  def type(name, parent=nil)
    @types[name] ||= Type.new(name, parent)
  end

  def object(name, type=nil)
    @objects[name] ||= Obj.new(name, type)
  end

  def parameters(params)
    @params = Hash[params.map{|param| [param.name, param]}]
    params
  end

  def parse(str, domains)
    @domains = domains
    @tokens = []
    str = "" if str.nil?
    scanner = StringScanner.new(str + ' ')

    until scanner.eos?
      case
      when scanner.scan(/\s+/)
      # ignore space
      when scanner.scan(/;.*$/)
      # ignore comments
      when m = scanner.scan(/[\(]/)
        @tokens.push [:OPEN_BRACE, m]
      when m = scanner.scan(/[\)]/)
        @tokens.push [:CLOSE_BRACE, m]
      when m = scanner.scan(/-\s/)
        @tokens.push [:DASH, m.strip.to_sym]
      when m = scanner.scan(/=\s/)
        @tokens.push [:EQUAL, m.strip.to_sym]
      when m = scanner.scan(/define\b/i)
        @tokens.push [:DEFINE, m.to_sym]
      when m = scanner.scan(/\:?domain\b/i)
        @tokens.push [:DOMAIN, m.to_sym]
      when m = scanner.scan(/problem\b/i)
        @tokens.push [:PROBLEM, m.to_sym]
      when m = scanner.scan(/\:requirements\b/i)
        @tokens.push [:REQUIREMENTS, m]
      when m = scanner.scan(/\:types\b/i)
        @tokens.push [:TYPES, m]
      when m = scanner.scan(/\:predicates\b/i)
        @tokens.push [:PREDICATES, m]
      when m = scanner.scan(/\:action\b/i)
        @tokens.push [:ACTION, m]
      when m = scanner.scan(/\:parameters\b/i)
        @tokens.push [:PARAMETERS, m]
      when m = scanner.scan(/\:precondition\b/i)
        @tokens.push [:PRECONDITION, m]
      when m = scanner.scan(/\:effect\b/i)
        @tokens.push [:EFFECT, m]
      when m = scanner.scan(/\:objects\b/i)
        @tokens.push [:OBJECTS, m]
      when m = scanner.scan(/\:goal\b/i)
        @tokens.push [:GOAL, m]
      when m = scanner.scan(/\:init\b/i)
        @tokens.push [:INIT, m]
      when m = scanner.scan(/not\b/i)
        @tokens.push [:NOT, m.to_sym]
      when m = scanner.scan(/and\b/i)
        @tokens.push [:AND, m.to_sym]
      when m = scanner.scan(/\:[\w\-]+\b/i)
        @tokens.push [:SYMBOL, m[1..-1].to_sym]
      when m = scanner.scan(/\?[a-z][\w\-]*\b/i)
        @tokens.push [:VAR, m.to_sym]
      when m = scanner.scan(/[a-z][\w\-]*\b/i)
        @tokens.push [:ID, m.to_sym]
      else
        raise "unexpected characters: #{scanner.peek(5).inspect}"
      end
    end
    @tokens.push [false, false]
    do_parse
  end

  def next_token
    @tokens.shift
  end

  def on_error(t, val, vstack)
    trace = vstack.each_with_index.map{|l, i| "#{' ' * i}#{l}"}
    raise ParseError,
          "\nparse error on value #{val.inspect}\n#{trace.join("\n")}"
  end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    37,    38,    37,    38,    22,    70,    90,    61,    58,    39,
    93,    39,    23,    40,    41,    40,    41,    37,    38,   103,
    36,    93,    36,    93,    63,   118,    39,    37,    38,    93,
    40,    41,    26,    27,    28,    29,    39,    36,    64,    65,
    85,    41,    84,    37,    38,    37,    38,    36,    32,    34,
    33,    44,    39,    67,    39,    51,    40,    41,    40,    41,
    54,    37,    38,    36,    70,    36,    44,    72,    51,    21,
    39,    37,    38,    76,    85,    82,    84,    77,   118,    30,
    39,    36,    70,    80,    40,    41,    37,    38,    37,    38,
    61,    36,    15,    86,    87,    39,    24,    39,     2,    40,
    41,    85,    82,    84,    37,    38,    36,    95,    36,    96,
   100,    21,    15,    39,    37,    38,   100,    40,    41,   107,
   108,    93,    61,    39,    36,    93,   113,    40,    41,    37,
    38,    37,    38,   116,    36,     8,   119,   100,    39,     5,
    39,   121,    40,    41,    40,    41,    37,    38,   122,    36,
   123,    36,   124,   125,     4,    39,    37,    38,   127,    40,
    41,   116,     3,   130,   131,    39,    36,   nil,   nil,    40,
    41,   nil,   nil,   nil,   nil,   nil,    36 ]

racc_action_check = [
    84,    84,    83,    83,     8,    92,    74,    33,    33,    84,
    74,    83,     8,    84,    84,    83,    83,    70,    70,    83,
    84,    84,    83,    83,    35,    96,    70,   100,   100,    96,
    70,    70,    15,    15,    15,    15,   100,    70,    42,    43,
   100,   100,   100,    32,    32,    55,    55,   100,    21,    21,
    21,    44,    32,    45,    55,    28,    32,    32,    55,    55,
    32,   116,   116,    32,    47,    55,    26,    49,    50,    17,
   116,    29,    29,    52,   116,   116,   116,    53,   116,    16,
    29,   116,    56,    57,    29,    29,   107,   107,    61,    61,
    59,    29,    10,    62,    64,   107,     9,    61,     0,   107,
   107,    61,    61,    61,    46,    46,   107,    75,    61,    76,
    82,     7,     6,    46,    27,    27,    85,    46,    46,    87,
    89,    91,    34,    27,    46,    93,    94,    27,    27,    51,
    51,    48,    48,    95,    27,     4,    98,    99,    51,     3,
    48,   101,    51,    51,    48,    48,    22,    22,   102,    51,
   104,    48,   105,   106,     2,    22,    23,    23,   112,    22,
    22,   113,     1,   117,   126,    23,    22,   nil,   nil,    23,
    23,   nil,   nil,   nil,   nil,   nil,    23 ]

racc_action_pointer = [
    80,   162,   152,   139,   117,   nil,    94,    93,     1,    77,
    74,   nil,   nil,   nil,   nil,    28,    60,    51,   nil,   nil,
   nil,    36,   144,   154,   nil,   nil,    46,   112,    37,    69,
   nil,   nil,    41,   -11,   104,     5,   nil,   nil,   nil,   nil,
   nil,   nil,    19,    20,    31,    34,   102,    43,   129,    48,
    50,   127,    65,    58,   nil,    43,    61,    64,   nil,    72,
   nil,    86,    74,   nil,    76,   nil,   nil,   nil,   nil,   nil,
    15,   nil,   nil,   nil,   -13,    98,    91,   nil,   nil,   nil,
   nil,   nil,    92,     0,    -2,    98,   nil,   116,   nil,   101,
   nil,    98,   -16,   102,   116,   115,     6,   nil,   117,   119,
    25,   122,   129,   nil,   131,   133,   134,    84,   nil,   nil,
   nil,   nil,   139,   143,   nil,   nil,    59,   144,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   145,   nil,   nil,   nil,
   nil,   nil ]

racc_action_default = [
   -73,   -73,   -73,   -73,   -73,   132,   -73,   -73,   -73,   -73,
    -4,    -7,    -8,    -9,   -10,   -73,   -73,    -6,   -11,   -12,
   -13,   -73,   -73,   -73,    -1,    -3,   -73,   -73,   -73,   -73,
    -2,    -5,   -73,   -73,   -73,   -73,   -66,   -67,   -68,   -69,
   -70,   -71,   -73,   -73,   -65,   -73,   -50,   -51,   -60,   -73,
   -25,   -73,   -73,   -73,   -20,   -46,   -47,   -73,   -22,   -34,
   -35,   -73,   -73,   -14,   -73,   -16,   -64,   -17,   -49,   -52,
   -73,   -59,   -18,   -24,   -73,   -73,   -73,   -19,   -45,   -48,
   -21,   -33,   -71,   -73,   -73,   -70,   -23,   -73,   -61,   -73,
   -54,   -56,   -57,   -63,   -73,   -73,   -73,   -28,   -73,   -38,
   -73,   -73,   -73,   -43,   -73,   -73,   -73,   -73,   -53,   -55,
   -58,   -62,   -73,   -73,   -29,   -30,   -73,   -73,   -72,   -36,
   -37,   -39,   -40,   -41,   -42,   -44,   -73,   -26,   -31,   -32,
   -27,   -15 ]

racc_goto_table = [
    35,    42,    62,    53,    69,    97,    57,    52,    49,    43,
     9,    89,    45,    79,    25,    47,     1,    94,    98,    75,
   102,   105,   112,     7,   115,     6,    78,    66,   109,    74,
    73,    68,    81,   117,    47,   120,    71,    16,   111,    83,
    99,   nil,   129,   106,   nil,   nil,   nil,    31,    88,   110,
   nil,   nil,   nil,   nil,   101,   104,   nil,    99,   nil,   nil,
   nil,   nil,   nil,   114,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    83,   nil,
   nil,   128,   nil,   nil,   nil,   126,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    83 ]

racc_goto_check = [
    15,    15,    21,    19,    32,    27,    20,    15,    18,    16,
     3,    26,    17,    32,     3,    31,     1,    24,    29,    23,
    26,    26,    25,     4,    27,     2,    19,    16,    26,    15,
    18,    17,    20,    26,    31,    29,    31,     5,    35,    15,
    28,   nil,    27,    28,   nil,   nil,   nil,     5,    15,    32,
   nil,   nil,   nil,   nil,    19,    19,   nil,    28,   nil,   nil,
   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,
   nil,    21,   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    15 ]

racc_goto_pointer = [
   nil,    16,    21,     4,    19,    30,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -22,   -17,   -15,   -20,   -29,
   -27,   -32,   nil,   -33,   -58,   -72,   -63,   -71,   -42,   -64,
   nil,   -12,   -43,   nil,   nil,   -55 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    10,    17,    11,    12,
    13,    14,    18,    19,    20,    48,   nil,   nil,   nil,   nil,
   nil,    59,    50,   nil,   nil,   nil,   nil,   nil,    60,   nil,
    55,    56,   nil,    46,    91,    92 ]

racc_reduce_table = [
  0, 0, :racc_error,
  5, 25, :_reduce_1,
  5, 25, :_reduce_2,
  2, 27, :_reduce_3,
  1, 27, :_reduce_4,
  2, 29, :_reduce_5,
  1, 29, :_reduce_6,
  1, 30, :_reduce_7,
  1, 30, :_reduce_8,
  1, 30, :_reduce_9,
  1, 30, :_reduce_10,
  1, 31, :_reduce_11,
  1, 31, :_reduce_12,
  1, 31, :_reduce_13,
  4, 26, :_reduce_14,
  8, 28, :_reduce_15,
  4, 32, :_reduce_16,
  4, 33, :_reduce_17,
  4, 34, :_reduce_18,
  4, 36, :_reduce_19,
  3, 36, :_reduce_20,
  4, 37, :_reduce_21,
  3, 37, :_reduce_22,
  4, 38, :_reduce_23,
  2, 42, :_reduce_24,
  1, 42, :_reduce_25,
  7, 35, :_reduce_26,
  4, 47, :_reduce_27,
  2, 47, :_reduce_28,
  2, 48, :_reduce_29,
  2, 48, :_reduce_30,
  2, 49, :_reduce_31,
  2, 49, :_reduce_32,
  2, 44, :_reduce_33,
  1, 44, :_reduce_34,
  1, 45, :_reduce_none,
  4, 45, :_reduce_36,
  2, 53, :_reduce_37,
  1, 53, :_reduce_38,
  4, 52, :_reduce_39,
  4, 52, :_reduce_40,
  4, 52, :_reduce_41,
  4, 52, :_reduce_42,
  3, 52, :_reduce_43,
  4, 52, :_reduce_44,
  2, 43, :_reduce_45,
  1, 43, :_reduce_46,
  1, 43, :_reduce_47,
  2, 54, :_reduce_48,
  2, 41, :_reduce_49,
  1, 41, :_reduce_50,
  1, 41, :_reduce_51,
  2, 57, :_reduce_52,
  4, 46, :_reduce_53,
  3, 46, :_reduce_54,
  2, 50, :_reduce_55,
  1, 50, :_reduce_56,
  1, 50, :_reduce_57,
  2, 58, :_reduce_58,
  2, 55, :_reduce_59,
  1, 55, :_reduce_60,
  2, 56, :_reduce_61,
  2, 59, :_reduce_62,
  1, 59, :_reduce_63,
  2, 40, :_reduce_64,
  1, 40, :_reduce_65,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  2, 51, :_reduce_72 ]

racc_reduce_n = 73

racc_shift_n = 132

racc_token_table = {
  false => 0,
  :error => 1,
  :DEFINE => 2,
  :DOMAIN => 3,
  :REQUIREMENTS => 4,
  :TYPES => 5,
  :PREDICATES => 6,
  :ACTION => 7,
  :PARAMETERS => 8,
  :PRECONDITION => 9,
  :EFFECT => 10,
  :PROBLEM => 11,
  :OBJECTS => 12,
  :GOAL => 13,
  :INIT => 14,
  :NOT => 15,
  :AND => 16,
  :EQUAL => 17,
  :OPEN_BRACE => 18,
  :CLOSE_BRACE => 19,
  :SYMBOL => 20,
  :DASH => 21,
  :ID => 22,
  :VAR => 23 }

racc_nt_base = 24

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "DEFINE",
  "DOMAIN",
  "REQUIREMENTS",
  "TYPES",
  "PREDICATES",
  "ACTION",
  "PARAMETERS",
  "PRECONDITION",
  "EFFECT",
  "PROBLEM",
  "OBJECTS",
  "GOAL",
  "INIT",
  "NOT",
  "AND",
  "EQUAL",
  "OPEN_BRACE",
  "CLOSE_BRACE",
  "SYMBOL",
  "DASH",
  "ID",
  "VAR",
  "$start",
  "target",
  "domain_name",
  "domain_primaries",
  "domain_problem",
  "problem_primaries",
  "domain_primary",
  "problem_primary",
  "requirements",
  "types",
  "predicates",
  "action",
  "objects",
  "init",
  "goal",
  "name",
  "symbols",
  "type_list",
  "predicate_list",
  "object_list",
  "literals",
  "literal",
  "predicate",
  "parameters",
  "precondition",
  "effect",
  "vars_list",
  "empty",
  "atom_literal",
  "atom_literals",
  "objects_t",
  "names",
  "type",
  "types_t",
  "vars_t",
  "var_names" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 13)
  def _reduce_1(val, _values)
     val[2].merge!(val[3]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_2(val, _values)
     val[2].merge!(val[3]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_3(val, _values)
     val[0].merge(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 19)
  def _reduce_4(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_5(val, _values)
     val[0].merge(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_6(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_7(val, _values)
     { requirements: val[0] } 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_8(val, _values)
     { types: val[0] } 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_9(val, _values)
     { predicates: val[0] } 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_10(val, _values)
     (@actions ||= []) << val[0]; {actions: @actions} 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_11(val, _values)
     { objects: val[0] } 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_12(val, _values)
     { init: val[0] } 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_13(val, _values)
     { goal: val[0] } 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_14(val, _values)
     domain(val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 47)
  def _reduce_15(val, _values)
     problem(val[2], val[6]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 51)
  def _reduce_16(val, _values)
     requirements(val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_17(val, _values)
     val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_18(val, _values)
     val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_19(val, _values)
     val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 64)
  def _reduce_20(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 68)
  def _reduce_21(val, _values)
     val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_22(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 73)
  def _reduce_23(val, _values)
     val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 77)
  def _reduce_24(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 78)
  def _reduce_25(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_26(val, _values)
     @params = nil; Action.new(val[2], val[3], val[4], val[5]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 87)
  def _reduce_27(val, _values)
     parameters(val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_28(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_29(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 93)
  def _reduce_30(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 97)
  def _reduce_31(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 98)
  def _reduce_32(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 102)
  def _reduce_33(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 103)
  def _reduce_34(val, _values)
     [val[0]] 
  end
.,.,

# reduce 35 omitted

module_eval(<<'.,.,', 'parser.y', 108)
  def _reduce_36(val, _values)
     And.new(val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 112)
  def _reduce_37(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 113)
  def _reduce_38(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 117)
  def _reduce_39(val, _values)
     Fact[@predicates.fetch(val[1]), val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 118)
  def _reduce_40(val, _values)
     Formula.new(@predicates.fetch(val[1]), val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 119)
  def _reduce_41(val, _values)
     Equal.new(*(val[2])) 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 120)
  def _reduce_42(val, _values)
     EqualFormula.new(*(val[2])) 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 121)
  def _reduce_43(val, _values)
     Fact[@predicates.fetch(val[1]), []] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 122)
  def _reduce_44(val, _values)
     Not[val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 126)
  def _reduce_45(val, _values)
     val[0] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 127)
  def _reduce_46(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 128)
  def _reduce_47(val, _values)
     val[0].map {|n| object(n)} 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 132)
  def _reduce_48(val, _values)
     val[0].map {|n| object(n, val[1])} 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 136)
  def _reduce_49(val, _values)
     val[0] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 137)
  def _reduce_50(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 138)
  def _reduce_51(val, _values)
     val[0].map {|t| type(t)} 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 142)
  def _reduce_52(val, _values)
     val[0].map {|t| type(t, val[1])} 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 146)
  def _reduce_53(val, _values)
     predicate(val[1], val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 147)
  def _reduce_54(val, _values)
     predicate(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 151)
  def _reduce_55(val, _values)
     val[0] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 152)
  def _reduce_56(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 153)
  def _reduce_57(val, _values)
     val[0].map{|v| @params ? @params.fetch(v) : Var.new(v)} 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 157)
  def _reduce_58(val, _values)
     val[0].map{|v| Var.new(v, val[1])} 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 161)
  def _reduce_59(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_60(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 166)
  def _reduce_61(val, _values)
     type(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 170)
  def _reduce_62(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 171)
  def _reduce_63(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 175)
  def _reduce_64(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 176)
  def _reduce_65(val, _values)
     [val[0]] 
  end
.,.,

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

module_eval(<<'.,.,', 'parser.y', 189)
  def _reduce_72(val, _values)
     EMPTY 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

    end   # class Parser
    end   # module PDDL
  end   # module Longjing
