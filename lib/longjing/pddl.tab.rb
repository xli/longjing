#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require 'strscan'
module Longjing
  class PDDL < Racc::Parser

module_eval(<<'...end pddl.y/module_eval...', 'pddl.y', 28)

  def parse(str)
    @tokens = []
    str = "" if str.nil?
    scanner = StringScanner.new(str + ' ')

    until scanner.eos?
      case
      when scanner.scan(/\s+/)
      # ignore space
      when scanner.scan(/;.*$/)
      # ignore comments
      when m = scanner.scan(/[\(]/)
        @tokens.push [:OPEN_BRACE, m]
      when m = scanner.scan(/[\)]/)
        @tokens.push [:CLOSE_BRACE, m]
      when m = scanner.scan(/(>=|<=)\s/)
        @tokens.push [:OP, m.strip.to_sym]
      when m = scanner.scan(/[-\/*+><=]\s/)
        @tokens.push [:OP, m.strip.to_sym]
      when m = scanner.scan(/(\d+(\.\d+)?)\b/)
        @tokens.push [:NUMBER, m.to_f]
      when m = scanner.scan(/:([\w\-]*)\b/i)
        @tokens.push [:ID, m[1..-1].to_sym]
      when m = scanner.scan(/([a-z?][\w\-]*)\b/i)
        @tokens.push [:ID, m]
      else
        raise "unexpected characters: #{scanner.peek(5).inspect}"
      end
    end
    @tokens.push [false, false]
    do_parse
  end

  def next_token
    @tokens.shift
  end
...end pddl.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     7,     8,     9,     3,     7,     8,     9,     3,    11,     4,
    12,     3 ]

racc_action_check = [
     6,     6,     6,     6,     3,     3,     3,     3,     4,     1,
     5,     0 ]

racc_action_pointer = [
     6,     9,   nil,     2,     8,     4,    -2,   nil,   nil,   nil,
   nil,   nil,   nil,   nil ]

racc_action_default = [
    -9,    -9,    -1,    -9,    -9,    -9,    -4,    -5,    -6,    -7,
    -8,    14,    -2,    -3 ]

racc_goto_table = [
     5,     2,     1,    13 ]

racc_goto_check = [
     3,     2,     1,     3 ]

racc_goto_pointer = [
   nil,     2,     1,    -3,   nil ]

racc_goto_default = [
   nil,   nil,    10,   nil,     6 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 8, :_reduce_1,
  3, 9, :_reduce_2,
  2, 10, :_reduce_3,
  1, 10, :_reduce_4,
  1, 11, :_reduce_none,
  1, 11, :_reduce_none,
  1, 11, :_reduce_none,
  1, 11, :_reduce_none ]

racc_reduce_n = 9

racc_shift_n = 14

racc_token_table = {
  false => 0,
  :error => 1,
  :ID => 2,
  :OP => 3,
  :NUMBER => 4,
  :OPEN_BRACE => 5,
  :CLOSE_BRACE => 6 }

racc_nt_base = 7

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "ID",
  "OP",
  "NUMBER",
  "OPEN_BRACE",
  "CLOSE_BRACE",
  "$start",
  "target",
  "list",
  "ids",
  "id" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'pddl.y', 6)
  def _reduce_1(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'pddl.y', 9)
  def _reduce_2(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'pddl.y', 13)
  def _reduce_3(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'pddl.y', 14)
  def _reduce_4(val, _values)
     [val[0]] 
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

def _reduce_none(val, _values)
  val[0]
end

  end   # class PDDL
end   # module Longjing
